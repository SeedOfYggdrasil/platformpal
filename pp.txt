This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-20T10:38:54.276Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
import { useState } from 'react';
import PropTypes from 'prop-types';
import './style.css';

const FileUpload = () => {
  const [preview, setPreview] = useState('');
  const [messages, setMessages] = useState('');
  const [notImage, setNotImage] = useState(false);
  const [progress, setProgress] = useState(0);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onload = (event) => setPreview(event.target.result);
      reader.readAsDataURL(file);
      setNotImage(false);
      setMessages(`File "${file.name}" selected.`);
    } else {
      setPreview('');
      setNotImage(true);
      setMessages('Please select a valid image file.');
    }
  };

  return (
    <div>
      <h2>PlatformPal</h2>
      <p className="lead"Show the world what you got.<b>Everywhere you got it.</b></p>

      <form id="file-upload-form" className="uploader">
        <input
          id="file-upload"
          type="file"
          name="fileUpload"
          accept="image/*"
          onChange={handleFileChange}
        />

        <label htmlFor="file-upload" id="file-drag">
          {preview ? (
            <img id="file-image" src={preview} alt="Preview" />
          ) : (
            <div id="start">
              <i className="fa fa-download" aria-hidden="true"></i>
              <div>Select a file or drag here</div>
              {notImage && <div id="notimage">Please select an image</div>}
              <span id="file-upload-btn" className="btn btn-primary">
                Select File(s) to Upload (max: 10)
              </span>
            </div>
          )}
          <div id="response" className={preview ? '' : 'hidden'}>
            <div id="messages">{messages}</div>
            <progress className="progress" id="file-progress" value={progress}>
              <span>{progress}</span>%
            </progress>
          </div>
        </label>
      </form>
    </div>
  );
};

FileUpload.propTypes = {};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
@import url(https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css);
@import url("https://fonts.googleapis.com/css?family=Roboto");
html, body, * {
  box-sizing: border-box;
  font-size: 16px;
}

html, body {
  height: 100%;
  text-align: center;
}

body {
  padding: 2rem;
  background: #f8f8f8;
}

h2 {
  font-family: "Roboto", sans-serif;
  font-size: 26px;
  line-height: 1;
  color: #454cad;
  margin-bottom: 0;
}

p {
  font-family: "Roboto", sans-serif;
  font-size: 18px;
  color: #5f6982;
}

.uploader {
  display: block;
  clear: both;
  margin: 0 auto;
  width: 100%;
  max-width: 600px;
}
.uploader label {
  float: left;
  clear: both;
  width: 100%;
  padding: 2rem 1.5rem;
  text-align: center;
  background: #fff;
  border-radius: 7px;
  border: 3px solid #eee;
  transition: all 0.2s ease;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}
.uploader label:hover {
  border-color: #454cad;
}
.uploader label.hover {
  border: 3px solid #454cad;
  box-shadow: inset 0 0 0 6px #eee;
}
.uploader label.hover #start i.fa {
  transform: scale(0.8);
  opacity: 0.3;
}
.uploader #start {
  float: left;
  clear: both;
  width: 100%;
}
.uploader #start.hidden {
  display: none;
}
.uploader #start i.fa {
  font-size: 50px;
  margin-bottom: 1rem;
  transition: all 0.2s ease-in-out;
}
.uploader #response {
  float: left;
  clear: both;
  width: 100%;
}
.uploader #response.hidden {
  display: none;
}
.uploader #response #messages {
  margin-bottom: 0.5rem;
}
.uploader #file-image {
  display: inline;
  margin: 0 auto 0.5rem auto;
  width: auto;
  height: auto;
  max-width: 180px;
}
.uploader #file-image.hidden {
  display: none;
}
.uploader #notimage {
  display: block;
  float: left;
  clear: both;
  width: 100%;
}
.uploader #notimage.hidden {
  display: none;
}
.uploader progress,
.uploader .progress {
  display: inline;
  clear: both;
  margin: 0 auto;
  width: 100%;
  max-width: 180px;
  height: 8px;
  border: 0;
  border-radius: 4px;
  background-color: #eee;
  overflow: hidden;
}
.uploader .progress[value]::-webkit-progress-bar {
  border-radius: 4px;
  background-color: #eee;
}
.uploader .progress[value]::-webkit-progress-value {
  background: linear-gradient(to right, #393f90 0%, #454cad 50%);
  border-radius: 4px;
}
.uploader .progress[value]::-moz-progress-bar {
  background: linear-gradient(to right, #393f90 0%, #454cad 50%);
  border-radius: 4px;
}
.uploader input[type=file] {
  display: none;
}
.uploader div {
  margin: 0 0 0.5rem 0;
  color: #5f6982;
}
.uploader .btn {
  display: inline-block;
  margin: 0.5rem 0.5rem 1rem 0.5rem;
  clear: both;
  font-family: inherit;
  font-weight: 700;
  font-size: 14px;
  text-decoration: none;
  text-transform: initial;
  border: none;
  border-radius: 0.2rem;
  outline: none;
  padding: 0 1rem;
  height: 36px;
  line-height: 36px;
  color: #fff;
  transition: all 0.2s ease-in-out;
  box-sizing: border-box;
  background: #454cad;
  border-color: #454cad;
  cursor: pointer;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:36:44.499Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:36:21.517Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:33:32.843Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:20:06.663Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:16:11.241Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:15:02.948Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T16:14:17.487Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T15:47:36.534Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T15:46:22.572Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T15:44:45.662Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import '@s/FileUpload.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('');
      setError('No files selected');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setStatus('Uploading...');
      setError('');
      const response = await axios.post(apiEndpoint, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setStatus(`Upload progress: ${progress}%`);
        },
      });
      setStatus(response.data.message);
    } catch (err) {
      setError(`Error: ${err.response?.data?.error || err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="file-upload">
      {status && <p className="status">{status}</p>}
      {error && <p className="error">{error}</p>}
      <button onClick={handleButtonClick} className="uploadButton">
        Upload Files
      </button>
      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />
    </div>
  );
};

export default FileUpload;

================
File: frontend/src/components/Progress.jsx
================
// frontend/src/components/Progress.jsx

import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const Progress = ({ isLoading }) => {
  const [progress, setProgress] = useState(0);
  const socketURL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';

  useEffect(() => {
    const socket = io(socketURL);

    socket.on('processingProgress', ({ progress }) => setProgress(progress));
    socket.on('processingComplete', () => setProgress(100));

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
      socket.disconnect();
    };
  }, [socketURL]);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
''// frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {
  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
        <div className="cs-content">
          <div className="logo">
            <img
              src={logo}
              className={`logo ${isLoading ? 'loading' : ''}`}
              alt="Logo"
            />
          </div>
          <div className="title">
            <h2>
              PlatformPal
            </h2>
          </div>
          <div className="cs-card">
            <Progress isLoading={isLoading} />
            <FileUpload apiEndpoint="/api/upload" setLoading={setLoading} />
          </div>
      </div>
    </div>
  );
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
  }
  
.uploadButton {
  	display: flex;
    min-width: 100px;
    max-width: 150px;
    height: 50;
    padding: 2rem;
    background-color: rgba(25, 150, 200, 1);
    border: none;
    border-radius: 3px;
    color: #fff;
    justify-content: center;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
}
uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
}
.uploadButton:active  {
    background-color: rgb(160, 252, 255);
}
  
.status {
    display: flex;
    width: 100%;
    height: auto;
    padding: 1em;
    margin: 1em;
}
.status p {
    font-size: 1rem;
}
.status p.error {
     color: red;
}

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
  color: #fff;
}

.cs-container {
  display: flex;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  overflow: hidden;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  justify-items: center;
  text-align: center;
  margin: 1rem ;
  padding: 1rem;
}

.progress-text {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T12:01:27.269Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      LoadingSpinner.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
pp.txt
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// ../frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import Progress from './Progress.jsx';
import '@s/FileUpload.css';
import '@s/Progress.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const [buttonText, setButtonText] = useState('Upload Files');
  const fileInputRef = useRef(null);.

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('Upload Files');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setProgress(0);
      setButtonText('Uploading...')

     const response = await axios.post(apiEndpoint, formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
      onUploadProgress: (progressEvent) => {
        const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);

        socket.emit('processingProgress', { progress });
      },
    });

      setStatus(`${response.data.message}`);
    } catch (error) {
      setError(`Error: ${error.response?.data?.error || error.message}`);
    }
    setLoading(false);
  };

  return (

    <div className="file-upload">

      {status && 
      	<div className="status">
       		<p>{status}</p>
        </div>
       }
      {error &&
      	<div className="error"}
      		<p>{error}</p>
      	</div>
      }

      <button onClick={handleButtonClick} className="uploadButton">
        {buttonText}
      </button>

      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />

    </div>

  );
};

export default FileUpload;

================
File: frontend/src/components/LoadingSpinner.jsx
================
// ../frontend/src/components/LoadingSpinner.jsx

import { } from 'react';
import '@s/LoadingSpinner.css';

const LoadingSpinner = () => {
  return (
    <div className="spinner">
      <div className="one common"></div>
      <div className="two common"></div>
      <div className="three common"></div>
      <div className="four common"></div>
      <div className="five common"></div>
      <div className="six common"></div>
      <div className="seven common"></div>
      <div className="eight common"></div>
    </div>
  );
};

export default LoadingSpinner;

================
File: frontend/src/components/Progress.jsx
================
import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const socket = io('http://localhost:5000');

const Progress = ({ setLoading }) => {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    socket.on('processingProgress', ({ progress }) => {
      console.log('Socket connected');
      setProgress(progress);
    });

    socket.on('processingComplete', () => {
      setProgress(100);
    });

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
    };
  }, []);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
// ../frontend/src/pages/Home.jsx

import { useState } from 'react';
import { Box, Heading } from 'rebass';
import logo from '@a/logo.svg';
import FileUpload from '@c/FileUpload.jsx';
import Progress from '@c/Progress.jsx';
import '@s/Home.css';
import '@s/Progress.css';
import '@s/logo.css';

function Home() {

  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
    	<Box p={4} bg="black" boxShadow="0 0 8px rgba(255, 0, 255, 0.3)">
 			<div className="cs-content">

			<div className="logo">
				<img 
				src={logo} 
				className={`logo ${isLoading ? 'loading' : ''}`}
				/>
          	</div> 

	 			<div className="title">
      				<Heading fontSize={5} mb={3} color="white">
         				PlatformPal
     	 			</Heading>
    			</div>

    			<div className="cs-card">
    				<Progress
    					setLoading={setLoading}
    				/> 
     				<FileUpload
     					apiEndpoint="/api/upload"
						setLoading={setLoading}
     				/>
    			</div>

			</div>
		</Box>
	</div>
  )
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  .uploadButton {
    width: 100px;
    height:50px;
    padding: 10px;
    background-color: rgba(8, 109, 122, 0.7);
    border: none;
    border-radius: 3px;
    color: #fff;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
  }
  .uploadButton:active  {
    background-color: rgb(160, 252, 255);
  }
  
  .output {
    display: flex;
    width: 100%;
    height: auto;
    text-align: center;
    padding: 1em;
    margin: 1em;
    margin-bottom: 2rem;
  }
  
  .output p {
    font: Roboto, Helvetica, Arial, sans-serif;
    font-size: 1rem;
    color: #ad0000;
  }

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  width: 100%;
  height: 100%;
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
}

.cs-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  justify-content: center;
  text-align: center;
  overflow: hidden;
  color: #fff;
}

.cs-content {
   display: flex;
   width: 100%;
   height: auto;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  display: flex;
  width: 100%;
  height: auto;
  justify-items: center;
  text-align: center;
  margin: 2rem;
  padding: 2rem;
}

.progress-text {
  font-size: 16px;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http://localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: pp.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-19T11:15:03.112Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
backend/
  src/
    controllers/
      imageController.js
    middleware/
      upload.js
    routes/
      router.js
    utilities/
      getUploads.js
    server.js
  package.json
frontend/
  src/
    assets/
      logo.svg
    components/
      FileUpload.jsx
      LoadingSpinner.jsx
      Progress.jsx
    pages/
      Home.jsx
    styles/
      FileUpload.css
      Fonts.css
      Home.css
      LoadingSpinner.css
      logo.css
      Progress.css
    main.jsx
  eslint.config.js
  index.html
  package.json
  vite.config.js
.gitignore
package.json
README.md

================================================================
Repository Files
================================================================

================
File: backend/src/controllers/imageController.js
================
// ../bckend/src/controllers/imgController.js

import axios from 'axios';
import fs from 'fs';
import path from 'path';

export const processImages = async (req, res) => {
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ error: 'No files provided for processing' });
    }

    try {
        const fileData = req.files.map(file => ({
            path: file.path,
            filename: file.filename
        }));

        const responses = [];

        for (const file of fileData) {
            const aiResponse = await axios.post(process.env.AI_ENDPOINT, {
                filePath: file.path,
                fileName: file.filename,
                additionalData: {
                    prompt: req.body.prompt || 'Analyze, organize, and generate promotional material',
                    platforms: req.body.platforms || ['social', 'web', 'print']
                }
            }, {
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'PlatformPal/1.0'
                }
            });

            responses.push({
                file: file.filename,
                result: imgResponse.data
            });
        }

        fileData.forEach(file => {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
            }
        });

        return res.status(200).json({
            message: 'Files processed successfully',
            data: responses
        });

    } catch (error) {
        console.error('Error processing files:', error.message);
        return res.status(500).json({
            error: 'An error occurred while processing the files',
            details: error.message
        });
    }
};

export default processImages;

================
File: backend/src/middleware/upload.js
================
// ../backend/src/middleware/upload.js

import multer from 'multer';
import fs from 'fs';
import path from 'path';

const ensureUploadDirExists = (uploadDir) => {
    if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
    }
};

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = process.env.UPLOAD_DIR || 'uploads';
        ensureUploadDirExists(uploadDir);
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const timestamp = Date.now();
        const ext = path.extname(file.originalname);
        const baseName = path.basename(file.originalname, ext);
        cb(null, `${baseName}-${timestamp}${ext}`);
    }
});

const fileFilter = (req, file, cb) => {
    const allowedTypes = [
        'image/jpeg',
        'image/png',
        'image/gif',
        'image/webp',
        'image/bmp',
        'image/tiff',
        'image/svg+xml'
    ];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Only supported image file types are allowed!'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024
    }
}).array('imgFiles', 10);

export default upload;

================
File: backend/src/routes/router.js
================
// ../backend/src/routes/router.js

import express from 'express';
import axios from 'axios';
import ImageKit from 'imagekit';
import upload from '../middleware/upload.js';
import getUpload from '../utilities/getUploads.js'; // Uncommented assuming this utility exists

const router = express.Router();

// Upload Route
router.post('/upload', upload, (req, res) => {
  if (!req.files || req.files.length === 0) {
    return res.status(400).json({ error: 'No files uploaded' });
  }
  res.status(200).json({ message: 'Upload Successful', files: req.files });
});

// Image Prompt Route
router.get('/img-prompt', (req, res) => {
  const inputImages = getUpload();

  if (!inputImages || inputImages.length === 0) {
    return res.status(400).json({ error: 'No input images found' });
  }

  const imagePrompt = {
    task: "resize_images",
    description:
      "Resize all images to match the specifications of each image type for each social media platform. Avoid operations that may reduce quality, such as compression or filetype conversion. Do not crop, warp, or distort the images. Preserve resolution and aspect ratio, and fill empty space with solid black pixels.",
    data: {
      input_images: inputImages,
    },
    output: {
      Instagram: {
        "Profile Photo": "320x320",
        Landscape: "1080x566",
        Portrait: "1080x1350",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Facebook: {
        "Profile Photo": "170x170",
        Landscape: "1200x630",
        Portrait: "630x1200",
        Square: "1200x1200",
        Stories: "1080x1920",
        "Cover Photo": "820x312",
      },
      Twitter: {
        "Profile Photo": "400x400",
        Landscape: "1600x900",
        Portrait: "1080x1350",
        Square: "1080x1080",
        "Cover Photo": "1500x500",
      },
      LinkedIn: {
        "Profile Photo": "400x400",
        Landscape: "1200x627",
        Portrait: "627x1200",
        Square: "1080x1080",
        "Cover Photo": "1128x191",
      },
      TikTok: {
        "Profile Photo": "200x200",
        Portrait: "1080x1920",
        Square: "1080x1080",
        Stories: "1080x1920",
      },
      Etsy: {
        "Profile Photo": "500x500",
        Square: "2000x2000",
        "Cover Photo": "3360x840",
        Banner: "3360x840",
        Thumbnail: "570x456",
      },
      YouTube: {
        "Profile Photo": "800x800",
        Landscape: "1280x720",
        "Cover Photo": "2048x1152",
        Banner: "2048x1152",
        Thumbnail: "1280x720",
      },
      Tumblr: {
        "Profile Photo": "128x128",
        Landscape: "1280x750",
        Portrait: "1280x1920",
        Square: "500x500",
        "Cover Photo": "3000x1055",
        Banner: "3000x1055",
      },
    },
  };

  res.json(imagePrompt);
});

// AI Image Editor API Route
router.post('/img-resize', async (req, res) => {
  const { images } = req.body; // Expecting an array of image URLs or paths in the request body

  if (!images || images.length === 0) {
    return res.status(400).json({ error: 'No images provided for resizing' });
  }

  try {
    const imagekit = new ImageKit({
      publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
      privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
      urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT,
    });

    const resizedImages = await Promise.all(
      images.map(async (image) => {
        const response = await imagekit.url({
          src: image,
          transformation: [{ width: 1080, height: 1080, crop: 'maintain_ratio' }],
        });
        return response;
      })
    );

    res.status(200).json({ message: 'Images resized successfully', resizedImages });
  } catch (error) {
    console.error('Error resizing images:', error.message);
    res.status(500).json({ error: 'Failed to resize images' });
  }
});

export default router;

================
File: backend/src/utilities/getUploads.js
================
import fs from 'fs';
import path from 'path';

const uploadDir = path.join(new URL('.', import.meta.url).pathname, '../backend/upload');

function getUploads() {
  try {
    const files = fs.readdirSync(uploadDir);
    return files.map(file => path.join(uploadDir, file));
  } catch (error) {
    console.error("Error reading upload directory:", error);
    return [];
  }
}

export default getUploads;

================
File: backend/src/server.js
================
// ../backend/src/server.js

import express from 'express';
import dotenv from 'dotenv';
import cors from 'cors';
import winston from 'winston';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { Server } from 'socket.io';
import { fileURLToPath } from 'url';
import path from 'path';
import router from './routes/router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// Environmental Variables
dotenv.config();
const corsOrigins = process.env.CORS_ORIGINS?.split('.') || '*'
const port = process.env.SERVER_PORT || 5000;
const host = process.env.SERVER_HOST || 'localhost';

// Logs
const logger = winston.createLogger({
    level: 'info',
    transports: [
        new winston.transports.File({ filename: 'logs/combined.log' }),
        new winston.transports.Console()
    ]
});

// CORS
const corsOptions = {
  origin: corsOrigins,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  optionsSuccessStatus: 204,
};

// Rate-Limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
});

// Middleware
app.use(helmet());
app.use(cors(corsOptions));
app.use(limiter);
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('combined', { stream: { write: (msg) => logger.info(msg.trim()) } }));

// Debugging
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Internal server error', details: err.message });
});

// API Routes
app.use('/api', router);

// Static Frontend Build
app.use(
  express.static(path.join(__dirname, "..", "..", "frontend", "dist"), {
    maxAge: "1d",
  })
);

// Fallback to Frontend
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "..", "..", "frontend", "dist", "index.html"), {
    cacheControl: true,
  });
});

// Start Server
const server = app.listen(port, '0.0.0.0', () =>
logger.info(`SERVER LIVE: http://${host}:${port}`
));

const io = new Server(server, {
	cors: {
		origin: corsOrigins,
	},
});

// Websocket
io.on('connection', (socket) => {
  logger.info('Client connected.');

  // Simulated 'Progress' Output
  let progress = 0;
  const interval = setInterval(() => {
    progress = Math.min(progress + (Math.random() * 15 + 5), 100);

    socket.emit('processingProgress', { progress: Math.floor(progress) });
    console.log('Emitting progress:', progress);

    if (progress >= 100) {
      socket.emit('processingComplete');
      clearInterval(interval);
    }
  }, 1000);

  socket.on('disconnect', () => {
    logger.info('A client disconnected.');
    clearInterval(interval);
  });
});

// Graceful Shutdown
const gracefulShutdown = () => {
    logger.info('Shutting down server...');
    server.close(() => {
        logger.info('Server closed.');
        process.exit(0);
    });
};
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', (err) => {
    logger.error(`Uncaught Exception: ${err.message}`);
    process.exit(1);
});
process.on('unhandledRejection', (reason, promise) => {
    logger.error(`Unhandled Rejection at: ${promise}, reason: ${reason}`);
});

================
File: backend/package.json
================
{
  "name": "backend_platformpal",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "start": "node src/server.js"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "fs": "latest",
    "helmet": "^8.0.0",
    "http": "^0.0.1-security",
    "imagekit": "^6.0.0",
    "io": "^1.5.3",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "path": "^0.12.7",
    "socket.io": "^4.8.1",
    "winston": "^3.17.0"
  }
}

================
File: frontend/src/assets/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: frontend/src/components/FileUpload.jsx
================
// ../frontend/src/components/FileUpload.jsx

import { useRef, useState } from 'react';
import axios from 'axios';
import Progress from './Progress.jsx';
import '@s/FileUpload.css';
import '@s/Progress.css';

const FileUpload = ({ apiEndpoint, setLoading }) => {
  const [status, setStatus] = useState('');
  const [error, setError] = useState('');
  const [buttonText, setButtonText] = useState('Upload Files')
  const fileInputRef = useRef(null);

  const handleButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (e) => {
    const files = e.target.files;
    if (!files.length) {
      setStatus('Upload Files');
      return;
    }

    const formData = new FormData();
    Array.from(files).forEach((file) => formData.append('imgFiles', file));

    try {
      setLoading(true);
      setProgress(0);
      setButtonText('Uploading...')

     const response = await axios.post(apiEndpoint, formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
      onUploadProgress: (progressEvent) => {
        const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);

        socket.emit('processingProgress', { progress });
      },
    });

      setStatus(`${response.data.message}`);
    } catch (error) {
      setError(`Error: ${error.response?.data?.error || error.message}`);
    }
    setLoading(false);
  };

  return (

    <div className="file-upload">

      <Progress setLoading={setLoading} />

      <div className="status">
        {status && <p>{status}</p>}
        {error && <p>{error}</p>}
      </div>

      <button onClick={handleButtonClick} className="uploadButton">
        {buttonText}
      </button>

      <input
        type="file"
        multiple
        ref={fileInputRef}
        onChange={handleFileChange}
        style={{ display: 'none' }}
      />

      <div className="error">
        
      </div>

    </div>

  );
};

export default FileUpload;

================
File: frontend/src/components/LoadingSpinner.jsx
================
// ../frontend/src/components/LoadingSpinner.jsx

import { } from 'react';
import '@s/LoadingSpinner.css';

const LoadingSpinner = () => {
  return (
    <div className="spinner">
      <div className="one common"></div>
      <div className="two common"></div>
      <div className="three common"></div>
      <div className="four common"></div>
      <div className="five common"></div>
      <div className="six common"></div>
      <div className="seven common"></div>
      <div className="eight common"></div>
    </div>
  );
};

export default LoadingSpinner;

================
File: frontend/src/components/Progress.jsx
================
import { useState, useEffect } from 'react';
import { io } from 'socket.io-client';
import '@s/Progress.css';

const socket = io('http://localhost:5000');

const Progress = ({ setLoading }) => {
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    socket.on('processingProgress', ({ progress }) => {
      console.log('Socket connected');
      setProgress(progress);
    });

    socket.on('processingComplete', () => {
      setProgress(100);
    });

    return () => {
      socket.off('processingProgress');
      socket.off('processingComplete');
    };
  }, []);

  return (
    <div className="progress">
      {isLoading && <p className="progress-text">{progress}%</p>}
    </div>
  );
};

export default Progress;

================
File: frontend/src/pages/Home.jsx
================
// ../frontend/src/pages/Home.jsx

import { useState } from 'react';
import logo from '../assets/logo.svg';
import { Box, Heading } from 'rebass';
import FileUpload from '@c/FileUpload.jsx';
import '@s/Home.css';
import '@s/logo.css';

function Home() {

  const [isLoading, setLoading] = useState(false);

  return (
    <div className="cs-container">
    	<Box p={4} bg="black" boxShadow="0 0 8px rgba(255, 0, 255, 0.3)">
 			<div className="cs-content">

			<div className="logo">
				<img 
				src={logo} 
				className={`logo ${isLoading ? 'loading' : ''}`}
				/>
          	</div> 

	 			<div className="title">
      				<Heading fontSize={5} mb={3} color="white">
         				PlatformPal
     	 			</Heading>
    			</div>

    			<div className="cs-card">
     				<FileUpload
     					apiEndpoint="/api/upload"
						setLoading={setLoading}
     				/>
    			</div>

			</div>
		</Box>
	</div>
  )
}

export default Home;

================
File: frontend/src/styles/FileUpload.css
================
/* ../frontend/src/styles/FileUpload.css */

.file-upload {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  .uploadButton {
    width: 100px;
    height:50px;
    padding: 10px;
    background-color: rgba(8, 109, 122, 0.7);
    border: none;
    border-radius: 3px;
    color: #fff;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .uploadButton:hover {
    background-color: rgba(41, 210, 252, 0.74);
  }
  .uploadButton:active  {
    background-color: rgb(160, 252, 255);
  }
  
  .output {
    display: flex;
    width: 100%;
    height: auto;
    text-align: center;
    padding: 1em;
    margin: 1em;
    margin-bottom: 2rem;
  }
  
  .output p {
    font: Roboto, Helvetica, Arial, sans-serif;
    font-size: 1rem;
    color: #ad0000;
  }

================
File: frontend/src/styles/Fonts.css
================
@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');

.roboto-thin {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: normal;
}

.roboto-light {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: normal;
}

.roboto-regular {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: normal;
}

.roboto-medium {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: normal;
}

.roboto-bold {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: normal;
}

.roboto-black {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: normal;
}

.roboto-thin-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 100;
  font-style: italic;
}

.roboto-light-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 300;
  font-style: italic;
}

.roboto-regular-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 400;
  font-style: italic;
}

.roboto-medium-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-style: italic;
}

.roboto-bold-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 700;
  font-style: italic;
}

.roboto-black-italic {
  font-family: "Roboto", sans-serif;
  font-weight: 900;
  font-style: italic;
}

================
File: frontend/src/styles/Home.css
================
/* ../frontend/src/styles/Home.css */

html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}

html, body {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
}

body {
  width: 100%;
  height: 100%;
  min-width: 320px;
  max-width: 1270px; 
  background-color: #000;
}

.cs-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  min-width: 100vw;
  min-height: 100vh;
  padding: 0;
  margin: 0;
  justify-content: center;
  text-align: center;
  overflow: hidden;
  color: #fff;
}

.cs-content {
   position: relative;
   display: flex;
   width: 100%;
   height: auto;
   flex-direction: column;
   justify-content: center;
   text-align: center;
   align-items: center;
   margin-top: 15vh;
}

.cs-card {
  padding: 2em;
}

================
File: frontend/src/styles/LoadingSpinner.css
================
/* ../frontend/src/styles/LoadingSpinner.css */

.spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
  }

.common {
    max-height: 100%;
    overflow: auto;
    margin: auto;
    max-width: 100%;
    border-radius: 0em 10em 0em 10em;
    box-shadow: inset 0em 0em 0em .1em #E645D0, 0em 0em 1.5em 0em #E645D0;
  }
  
.one {
  transform: rotate(45deg);
}

.two {
  transform: rotate(90deg);
}

.three {
  transform: rotate(135deg);
}

.four {
  transform: rotate(180deg);
}

.five {
  transform: rotate(225deg);
}

.six {
  transform: rotate(270deg);
}

.seven {
  transform: rotate(315deg);
}

.eight {
  transform: rotate(360deg);
}

.one {
  animation: one 1s ease infinite;
  -moz-animation: one 1s ease infinite;
  /* Firefox */
  -webkit-animation: one 1s ease infinite;
  /* Safari and Chrome */
  -o-animation: one 1s ease infinite;
  /* Opera */
}

@keyframes one {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.two {
  animation: two 1s .125s ease infinite;
  -moz-animation: two 1s .125s ease infinite;
  /* Firefox */
  -webkit-animation: two 1s .125s ease infinite;
  /* Safari and Chrome */
  -o-animation: two 1s .125s ease infinite;
  /* Opera */
}

@keyframes two {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.three {
  animation: three 1s .25s ease infinite;
  -moz-animation: three 1s .25s ease infinite;
  /* Firefox */
  -webkit-animation: three 1s .25s ease infinite;
  /* Safari and Chrome */
  -o-animation: three 1s .25s ease infinite;
  /* Opera */
}

@keyframes three {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.four {
  animation: four 1s .375s ease infinite;
  -moz-animation: four 1s .375s ease infinite;
  /* Firefox */
  -webkit-animation: four 1s .375s ease infinite;
  /* Safari and Chrome */
  -o-animation: four 1s .375s ease infinite;
  /* Opera */
}

@keyframes four {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.five {
  animation: five 1s .5s ease infinite;
  -moz-animation: five 1s .5s ease infinite;
  /* Firefox */
  -webkit-animation: five 1s .5s ease infinite;
  /* Safari and Chrome */
  -o-animation: five 1s .5s ease infinite;
  /* Opera */
}

@keyframes five {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.six {
  animation: six 1s .625s ease infinite;
  -moz-animation: six 1s .625s ease infinite;
  /* Firefox */
  -webkit-animation: six 1s .625s ease infinite;
  /* Safari and Chrome */
  -o-animation: six 1s .625s ease infinite;
  /* Opera */
}

@keyframes six {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.seven {
  animation: seven 1s .750s ease infinite;
  -moz-animation: seven 1s .750s ease infinite;
  /* Firefox */
  -webkit-animation: seven 1s .750s ease infinite;
  /* Safari and Chrome */
  -o-animation: seven 1s .750s ease infinite;
  /* Opera */
}

@keyframes seven {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.eight {
  animation: eight 1s .875s ease infinite;
  -moz-animation: eight 1s .875s ease infinite;
  /* Firefox */
  -webkit-animation: eight 1s .875s ease infinite;
  /* Safari and Chrome */
  -o-animation: eight 1s .875s ease infinite;
  /* Opera */
}

@keyframes eight {
  0%,
  100% {}
  50% {
    /* background: ; */
    box-shadow: inset 0em 0em 0em .1em #17E1E6, 0em 0em 1.5em 0em #17E1E6;
  }
}

.container {
  animation: container 5s linear infinite;
  -moz-animation: container 5s linear infinite;
  /* Firefox */
  -webkit-animation: container 5s linear infinite;
  /* Safari and Chrome */
  -o-animation: container 5s linear infinite;
  /* Opera */
}

@keyframes container {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(-360deg);
  }
}

.fade-in {
  animation: fade-in 2s ease;
  -moz-animation: fade-in 2s ease;
  /* Firefox */
  -webkit-animation: fade-in 2s ease;
  /* Safari and Chrome */
  -o-animation: fade-in 2s ease;
  /* Opera */
}

@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.out {
  animation: out 2s 15s ease;
  -moz-animation: out 2s 15s ease;
  /* Firefox */
  -webkit-animation: out 2s 15s ease;
  /* Safari and Chrome */
  -o-animation: out 2s 15s ease;
  /* Opera */
}

@keyframes out {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

================
File: frontend/src/styles/logo.css
================
/* ../frontend/src/styles/logo.css */

.logo {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 6em;
    width: 6em;
    padding: 1.2em;
    will-change: filter;
    transition: filter 300ms;
    transition: transform 1s ease;
}

.logo.loading {
    filter: drop-shadow(0 0 2em #02ffc0aa);
    animation: rotateCounterClockwise 2s linear infinite;
}

@keyframes rotateCounterClockwise {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

================
File: frontend/src/styles/Progress.css
================
/* ../frontend/src/styles/Progress.css */

.progress {
  text-align: center;
  margin: 2rem;
  padding: 2rem;
}

.progress p {
  font-size: 3em;
  color: #ffffff;
}

================
File: frontend/src/main.jsx
================
// ../frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import Home from '@p/Home.jsx';
import '@s/Fonts.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <Home />
  </React.StrictMode>
);

================
File: frontend/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: frontend/index.html
================
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>PlatformPal</title>
    <link rel="stylesheet" href="https://necolas.github.io/normalize.css/" />
</head>
<body>

  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>

</body>
</html>

================
File: frontend/package.json
================
{
  "name": "frontend_metamockup",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "react": "latest",
    "react-dom": "latest",
    "rebass": "^4.0.7",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "latest"
  }
}

================
File: frontend/vite.config.js
================
// ../frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@a': path.resolve(__dirname, './src/assets'),
      '@c': path.resolve(__dirname, './src/components'),
      '@p': path.resolve(__dirname, './src/pages'),
      '@s': path.resolve(__dirname, './src/styles'),
    }
  },
  server: {
    host: '0.0.0.0',
    proxy: {
      '/api/': {
        target: 'http://localhost:5000',
        changeOrigin: true,
		secure: false,
		// rewrite: (path) => path.replace(/^\/api/, '')
      },
      '/socket-io/': {
      	target: 'http:/.localhost:5000',
      	changeOrigin: true,
      	secure: false,
      	ws: true,
        // rewrite: (path) => path.replace(/^\/socket-io/, '')
      },
    }
  },
  build: { sourcemap: false }
});

================
File: .gitignore
================
node_modules
package-lock.json
venv
venv/*
.env

logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules/*
dist
dist-ssr
*.local

.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: package.json
================
{"scripts":{"start":"cd backend && npm run start","dev":"cd frontend && npm run dev","deploy":"cd frontend && npm run build && cd ../backend && npm run start","refresh":"cd frontend && rm package-lock.json && rm -r node_modules && rm -r dist && npm i && npm run build && cd ../backend && rm package-lock.json && rm -r node_modules && npm i"},"dependencies":{"repomix":"^0.2.5"}}

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License

================
File: README.md
================
# PlatformPal

## **Concept Overview**
An AI-driven app designed to streamline the process of creating and listing digital products on platforms like Etsy, Amazon KDP, Redbubble, Shopify, and eBay. The app solves two major challenges:

1. **Sample Page/Advertisement Display Creation**:
   - Automatically generates sample pages or listing advertisement images.
   - Features include:
     - Uploading files and arranging them into professional, customizable templates.
     - Generating listing titles, bundle names, and descriptions with AI.
     - Suggesting keywords, descriptions, and marketing details.

2. **Cross-Platform Compatibility**:
   - Reformat digital files to meet the technical specifications of multiple platforms (file type, size, resolution, orientation, etc.).
   - Support for platform-specific layouts (e.g., KDP trim sizes, Etsy mockups, Redbubble resolutions).
   - Automatically updates listings for each platform while maintaining compatibility.

## **Key Features**
- **Advertisement Image Automation**:
  - Auto-generate professional listing images.
  - Customize fonts, layouts, and sample previews.

- **Platform-Specific Reformatting**:
  - Ensure compatibility with multiple platforms' unique technical requirements.

- **AI-Powered Listings**:
  - Generate bundle names, descriptions, and keywords based on user input and trends.

- **Bulk Processing**:
  - Reformat and update large bundles in one step.

- **Custom Branding**:
  - Options for personalized watermarks, logos, and templates.

- **Preview Listings**:
  - Display how bundles will appear on different platforms.
 
## Development
**Tech-Stack**
- Frontend: Vite+React
- Backend: Node.js+Express
- Database: MongoDB
- API: HuggingFace

## License
Licensed under the MIT License
